# -*- coding: utf-8 -*-
"""SubmissionNLP1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qRMo9630tgO6R7AlA3ohSH6O9ZnbDQ5p

# Nama : Muhammad Hamzah Fyrzatullah
# Alamat : Kabupaten Bekasi Jawa Barat
# Email : muhammadhamzahf@gmail.com
"""

from google.colab import files
files.upload()

!pip install -q kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!ls ~/.kaggle
!chmod 600 /root/.kaggle/kaggle.json

!kaggle datasets download -d shrutinikkigupta/movie-reviews-imdb

ls

import pandas as pd
import zipfile
zip_ref = zipfile.ZipFile('movie-reviews-imdb.zip', 'r')
zip_ref.extractall('files')
zip_ref.close()

df = pd.read_csv('/content/files/train.csv')
df.head()

category = pd.get_dummies(df.labels)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns=['labels'])
df_baru

reviews = df_baru['reviews'].values
labels = df_baru[[0,1]].values

from sklearn.model_selection import train_test_split
reviews_train, reviews_test, labels_train, labels_test = train_test_split(reviews, labels, test_size=0.2)

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import tensorflow as tf

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(reviews_train)
tokenizer.fit_on_texts(reviews_test)

sequences_train = tokenizer.texts_to_sequences(reviews_train)
sequences_test = tokenizer.texts_to_sequences(reviews_test)

padded_train = pad_sequences(sequences_train)
padded_test = pad_sequences(sequences_test)

import tensorflow as tf
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95):
      print("\nAkurasi telah mencapai >95%!")
      self.model.stop_training = True
callbacks = myCallback()

num_epochs = 30
history = model.fit(padded_train, labels_train,
                    epochs=num_epochs,
                    validation_data=(padded_test, labels_test), verbose=2, callbacks=[callbacks])

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()